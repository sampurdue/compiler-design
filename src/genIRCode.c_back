#include <stdio.h>
#include <string.h>
#include "IRNode.h"
#include "TinyNode.h"
#include "symbolTable.h"
#include <list>
using namespace std;

extern list<TinyNode*>* IRtoTinyCode(list <IRNode*>*IRlist, symTab* symTable);


int main(int argc, char* argv[])
{
	size_t len = 0;
	int i;
	list<IRNode*> *irNodeList = new std::list<IRNode*>;
	list<TinyNode*> *tinyList = NULL;

	if(argc < 2)
	{
		printf("Need file for input \n");
	}
	else
	{
		FILE *f1 = fopen(argv[1],"r");
		char* buf = NULL;
		char temp[40];
		memset(temp, 0, 40);
			

		while(!feof(f1))
		{
			getline(&buf, &len, f1);
			if(strstr(buf, ";tiny code"))
				{printf("; ");printf("found tiny code\n");break;}
			if(buf[0] == ';')
			{
				if(strstr(buf, ";IR code")) {continue;}
				IRNode * tempNode = new IRNode();
				//printf("%s \n", buf);
				char* token = NULL;
				//const char* space = ' ';
				token = strtok(buf+1," " );
				if(token != NULL)
					tempNode->opcode = strdup(token);
				token = strtok(NULL," " );
				if(token != NULL)
					tempNode->op1 = strdup(token);
				token = strtok(NULL," ");
				if(token != NULL)
					tempNode->op2 = strdup(token);
				token = strtok(NULL,"\n" );
				if(token != NULL)
					{tempNode->result = strdup(token); i = strlen(token); token[i-1]=0;}
				irNodeList->push_back(tempNode);
					
			}
		}
		
		list<IRNode*>::iterator it = irNodeList->begin();
		for(; it != irNodeList->end(); it++)
			{printf("; ");(*it)->printIRNode();}


		tinyList = IRtoTinyCode(irNodeList, NULL);
		list<TinyNode*>::iterator itIRNode = tinyList->begin();
		for(; itIRNode != tinyList->end(); itIRNode++)
			(*itIRNode)->printTinyNode();

	}
}


